datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?

  // Your existing relations
  boards         Board[]       @relation("OwnedBoards")
  memberships    Membership[]
  activities     Activity[]    @relation("ActorActivities")
  comments       Comment[]

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
}

model Board {
  id          String        @id @default(cuid())
  title       String
  ownerId     String
  owner       User          @relation("OwnedBoards", fields: [ownerId], references: [id])
  memberships Membership[]
  lists       List[]
  activities  Activity[]
  createdAt   DateTime      @default(now())

  @@index([ownerId])
}

model Membership {
  id        String          @id @default(cuid())
  userId    String
  boardId   String
  role      MembershipRole  @default(MEMBER)
  user      User            @relation(fields: [userId], references: [id])
  board     Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
  @@index([boardId])
  @@index([userId])
}

enum MembershipRole {
  OWNER
  MEMBER
}

model List {
  id        String   @id @default(cuid())
  boardId   String
  title     String
  position  Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]

  @@index([boardId])
  @@index([boardId, position]) // fast horizontal ordering
}

model Card {
  id          String     @id @default(cuid())
  listId      String
  title       String
  description String?
  position    Float      // fractional ranks for cheap reordering
  list        List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([listId])
  @@index([listId, position]) // fast vertical ordering
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  cardId    String
  userId    String
  body      String
  createdAt DateTime @default(now())

  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([cardId, createdAt]) // fast comment pagination
}

model Activity {
  id          String       @id @default(cuid())
  boardId     String
  actorId     String
  type        ActivityType
  entityType  String
  entityId    String
  metadata    Json?
  createdAt   DateTime     @default(now())

  board       Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  actor       User         @relation("ActorActivities", fields: [actorId], references: [id])

  @@index([boardId, createdAt])
  @@index([entityType, entityId])
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  MOVE
}

/// ——————————————
/// NextAuth models
/// ——————————————

model Account {
  id                 Int      @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}